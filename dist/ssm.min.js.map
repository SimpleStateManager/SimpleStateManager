{"version":3,"file":"ssm.min.js","sources":["../src/utils.js","../src/state.js","../src/ssm.js"],"sourcesContent":["export function filterStates(states, key, value) {\n    return states.filter(state => state[key] && state[key] === value);\n}\n\nexport function makeID() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\nexport function fireAllMethodsInArray(arr) {\n    arr.forEach(method => method());\n}\n\nexport function funcToArray(func) {\n    return typeof func === 'function' ? [func] : func;\n}\n\nexport function debounce(func) {\n    let timeout;\n\n    return (...args) => {\n        const later = () => {\n            timeout = null;\n            func.apply(this, args);\n        };\n\n        if (timeout) {\n            window.cancelAnimationFrame(timeout);\n        }\n\n        timeout = window.requestAnimationFrame(later);\n    };\n}\n","import {\n    fireAllMethodsInArray,\n    makeID,\n} from './utils';\n\nconst configOptions = [];\nlet stateChangeMethod = function () { };\n\nexport default class State {\n    constructor(options) {\n        this.id = options.id || makeID();\n        this.query = options.query || 'all';\n\n        const defaultOptions = {\n            onEnter: [],\n            onLeave: [],\n            onResize: [],\n            onFirstRun: [],\n        };\n\n        // Merge options with defaults to make the state\n        this.options = Object.assign({}, defaultOptions, options);\n\n        // Migrate methods into an array, this is to enable future functionality of adding extra methods to an existing state\n        if (typeof this.options.onEnter === 'function') {\n            this.options.onEnter = [this.options.onEnter];\n        }\n\n        if (typeof this.options.onLeave === 'function') {\n            this.options.onLeave = [this.options.onLeave];\n        }\n\n        if (typeof this.options.onResize === 'function') {\n            this.options.onResize = [this.options.onResize];\n        }\n\n        if (typeof this.options.onFirstRun === 'function') {\n            this.options.onFirstRun = [this.options.onFirstRun];\n        }\n\n        // Test the one time tests first, if the test is invalid we wont create the config option\n        if (this.testConfigOptions('once') === false) {\n            this.valid = false;\n            return false;\n        }\n\n        this.valid = true;\n        this.active = false;\n        this.init();\n    }\n\n    init() {\n        this.test = window.matchMedia(this.query);\n\n        if (this.test.matches && this.testConfigOptions('match')) {\n            this.enterState();\n        }\n\n        this.listener = (test) => {\n            let changed = false;\n\n            if (test.matches) {\n                if (this.testConfigOptions('match')) {\n                    this.enterState();\n                    changed = true;\n                }\n            } else {\n                this.leaveState();\n                changed = true;\n            }\n\n            if (changed) {\n                stateChangeMethod();\n            }\n        };\n\n        this.test.addListener(this.listener);\n    }\n\n    // Handle entering a state\n    enterState() {\n        fireAllMethodsInArray(this.options.onFirstRun);\n        fireAllMethodsInArray(this.options.onEnter);\n        this.options.onFirstRun = [];\n        this.active = true;\n    }\n\n    // Handle leaving a state\n    leaveState() {\n        fireAllMethodsInArray(this.options.onLeave);\n        this.active = false;\n    }\n\n    // Handle the user resizing the browser\n    resizeState() {\n        if (this.testConfigOptions('resize')) {\n            fireAllMethodsInArray(this.options.onResize);\n        }\n    }\n\n    // When the StateManager removes a state we want to remove the event listener\n    destroy() {\n        this.test.removeListener(this.listener);\n    }\n\n    attachCallback(type, callback, runIfActive) {\n        switch (type) {\n        case 'enter':\n            this.options.onEnter.push(callback);\n            break;\n        case 'leave':\n            this.options.onLeave.push(callback);\n            break;\n        case 'resize':\n            this.options.onResize.push(callback);\n            break;\n        default:\n            break;\n        }\n\n        if (type === 'enter' && runIfActive && this.active) {\n            callback();\n        }\n    }\n\n    testConfigOptions(when) {\n        let test = true;\n\n        configOptions.forEach((configOption) => {\n            if (typeof this.options[configOption.name] !== 'undefined') {\n                if (configOption.when === when && configOption.test.bind(this)() === false) {\n                    test = false;\n                }\n            }\n        });\n\n        return test;\n    }\n\n    static addConfigOption(configOption) {\n        configOptions.push(configOption);\n    }\n\n    static getConfigOptions() {\n        return configOptions;\n    }\n\n    static removeConfigOption(name) {\n        configOptions.forEach((item, index) => {\n            if (item.name === name) {\n                configOptions.splice(index, 1);\n            }\n        });\n    }\n\n    static setStateChangeMethod(func) {\n        if (typeof func === 'function') {\n            stateChangeMethod = func;\n        } else {\n            throw new Error('Not a function');\n        }\n    }\n}\n","import State from './state';\nimport {\n    debounce,\n    filterStates,\n} from './utils';\n\n// State Manager Constructor\nclass StateManager {\n    constructor() {\n        this.states = [];\n        this.resizeTimer = null;\n        this.configOptions = [];\n\n        window.addEventListener('resize', debounce(this.resizeBrowser.bind(this), 25), true);\n    }\n\n    addState(options) {\n        const newState = new State(options);\n\n        if (newState.valid) {\n            this.states.push(newState);\n        }\n\n        return newState;\n    }\n\n    addStates(statesArray) {\n        statesArray.forEach(state => this.addState(state));\n    }\n\n    getState(id) {\n        const selectedState = this.states.filter(state => state.id === id);\n\n        return selectedState[0] || false;\n    }\n\n    isActive(id) {\n        const selectedState = this.getState(id) || {};\n\n        return selectedState.active || false;\n    }\n\n    getStates(idArr) {\n        if (typeof (idArr) === 'undefined') {\n            return this.states;\n        }\n\n        return idArr.map(id => this.getState(id));\n    }\n\n    removeState(id) {\n        this.states.forEach((state, index) => {\n            if (state.id === id) {\n                state.destroy();\n                this.states.splice(index, 1);\n            }\n        });\n    }\n\n    removeStates(idArray) {\n        idArray.forEach(id => this.removeState(id));\n    }\n\n    removeAllStates() {\n        this.states.forEach(state => state.destroy());\n        this.states = [];\n    }\n\n    addConfigOption({\n        name = '', // name, this is used to apply to a state\n        test = null, // function which will perform the test\n        when = 'resize', // resize or match (match will mean that resize will never fire either), or once (which will test once, then delete state if test doesnt pass)\n    }) {\n        if (name !== '' && test !== null) {\n            State.addConfigOption({\n                name,\n                test,\n                when,\n            });\n        }\n    }\n\n    removeConfigOption(name) {\n        State.removeConfigOption(name);\n    }\n\n    getConfigOptions(name) {\n        const configOptions = State.getConfigOptions();\n\n        if (typeof name === 'string') {\n            return configOptions.filter(configOption => configOption.name === name);\n        }\n\n        return configOptions;\n    }\n\n    resizeBrowser() {\n        const activeStates = filterStates(this.states, 'active', true);\n\n        activeStates.forEach((state) => {\n            state.resizeState();\n        });\n    }\n\n    stateChange(func) {\n        State.setStateChangeMethod(func);\n    }\n}\n\nexport default new StateManager();\n"],"names":["filterStates","states","key","value","filter","state","makeID","Math","random","toString","substr","fireAllMethodsInArray","arr","forEach","method","debounce","func","timeout","args","cancelAnimationFrame","window","requestAnimationFrame","apply","configOptions","stateChangeMethod","State","options","id","query","defaultOptions","Object","assign","this","onEnter","onLeave","onResize","onFirstRun","testConfigOptions","valid","active","init","test","matchMedia","matches","enterState","listener","changed","_this","leaveState","addListener","removeListener","type","callback","runIfActive","push","when","configOption","_this2","name","bind","item","index","splice","Error","resizeTimer","addEventListener","resizeBrowser","newState","statesArray","addState","getState","idArr","map","destroy","idArray","_this4","removeState","addConfigOption","removeConfigOption","getConfigOptions","resizeState","setStateChangeMethod"],"mappings":"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"}