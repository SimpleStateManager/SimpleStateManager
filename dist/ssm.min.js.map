{"version":3,"file":"ssm.min.js","sources":["../src/utils.js","../src/state.js","../src/ssm.js"],"sourcesContent":["export function filterStates(states, key, value) {\n    var len = states.length;\n    var returnStates = [];\n\n    for (var i = 0; i < len; i++) {\n        var state = states[i];\n\n        if (state[key] && state[key] === value) {\n            returnStates.push(state);\n        }\n    }\n\n    return returnStates;\n}\n\nexport function makeID() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 10; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nexport function fireAllMethodsInArray(arr) {\n    var arrLength = arr.length;\n\n    for (var i = 0; i < arrLength; i++) {\n        arr[i]();\n    }\n}\n\nexport function funcToArray(func) {\n    if (typeof func === 'function') {\n        return [func];\n    }\n    else {\n        return func;\n    }\n}\n\nexport function debounce(func, wait, immediate) {\n    var timeout;\n    \n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}","import {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    filterStates,\n} from './utils';\n\nconst configOptions = [];\nlet stateChangeMethod = function(){};\n\nexport default class State {\n    constructor(options) {\n        this.id = options.id || makeID();\n        this.query = options.query || 'all';\n        // These are exposed as part of the state, not options so delete before\n        // we merge these into default options.\n        delete options.id;\n        delete options.query;\n    \n        var defaultOptions = {\n            onEnter: [],\n            onLeave: [],\n            onResize: [],\n            onFirstRun: []\n        };\n    \n        //Merge options with defaults to make the state\n        this.options = Object.assign({}, defaultOptions, options);\n    \n        //Migrate methods into an array, this is to enable future functionality of adding extra methods to an existing state\n        if (typeof this.options.onEnter === \"function\") {\n            this.options.onEnter = [this.options.onEnter];\n        }\n    \n        if (typeof this.options.onLeave === \"function\") {\n            this.options.onLeave = [this.options.onLeave];\n        }\n    \n        if (typeof this.options.onResize === \"function\") {\n            this.options.onResize = [this.options.onResize];\n        }\n    \n        if (typeof this.options.onFirstRun === \"function\") {\n            this.options.onFirstRun = [this.options.onFirstRun];\n        }\n    \n        //Test the one time tests first, if the test is invalid we wont create the config option\n        if (this.testConfigOptions('once') === false) {\n            this.valid = false;\n            return false;\n        }\n    \n        this.valid = true;\n        this.active = false;\n        this.init();\n    }\n\n    init() {\n        this.test = window.matchMedia(this.query);\n\n        if (this.test.matches && this.testConfigOptions('match')) {\n            this.enterState();\n        }\n\n        this.listener = function (test) {\n            var changed = false;\n\n            if (test.matches) {\n                if (this.testConfigOptions('match')) {\n                    this.enterState();\n                    changed = true;\n                }\n            } else {\n                this.leaveState();\n                changed = true;\n            }\n\n            if (changed) {\n                stateChangeMethod();\n            }\n        }.bind(this);\n\n        this.test.addListener(this.listener);\n    }\n\n    //Handle entering a state\n    enterState() {\n        fireAllMethodsInArray(this.options.onFirstRun);\n        fireAllMethodsInArray(this.options.onEnter);\n        this.options.onFirstRun = [];\n        this.active = true;\n    }\n\n    //Handle leaving a state\n    leaveState() {\n        fireAllMethodsInArray(this.options.onLeave);\n        this.active = false;\n    }\n\n    //Handle the user resizing the browser\n    resizeState() {\n        if (this.testConfigOptions('resize')) {\n            fireAllMethodsInArray(this.options.onResize);\n        }\n    }\n\n    //When the StateManager removes a state we want to remove the event listener\n    destroy() {\n        this.test.removeListener(this.listener);\n    }\n\n    attachCallback(type, callback, runIfActive) {\n        switch (type) {\n            case 'enter':\n                this.options.onEnter.push(callback);\n                break;\n            case 'leave':\n                this.options.onLeave.push(callback);\n                break;\n            case 'resize':\n                this.options.onResize.push(callback);\n                break;\n        }\n\n        if (type === 'enter' && runIfActive && this.active) {\n            callback();\n        }\n    }\n\n    testConfigOptions(when) {\n        var totalConfigOptions = configOptions.length;\n\n        for (var j = 0; j < totalConfigOptions; j++) {\n            var configOption = configOptions[j];\n\n            if (typeof this.options[configOption.name] !== \"undefined\") {\n                if (configOption.when === when && configOption.test.bind(this)() === false) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    static addConfigOption(configOption) {\n        configOptions.push(configOption);\n    }\n\n    static getConfigOptions() {\n        return configOptions;\n    }\n    \n    static removeConfigOption(name) {\n        configOptions.forEach((item, index) => {\n            if (item.name === name) {\n                configOptions.splice(index, 1);\n            }\n        });\n    }\n\n    static setStateChangeMethod(func) {\n        if (typeof func === \"function\") {\n            stateChangeMethod = func;\n        }\n        else {\n            throw new Error('Not a function');\n        }\n    }\n};","import State from './state';\nimport {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    filterStates,\n} from './utils';\n\nvar resizeTimeout = 25;\n\nfunction Error(message) {\n    this.message = message;\n    this.name = \"Error\";\n}\n\n//State Manager Constructor\nclass StateManager {\n\n    constructor(options) {\n        this.states = [];\n        this.resizeTimer = null;\n        this.configOptions = [];\n\n        window.addEventListener(\"resize\", debounce(this.resizeBrowser.bind(this), resizeTimeout), true);    \n    }\n\n    addState(options) {\n        var newState = new State(options);\n        \n        if (newState.valid) {\n            this.states.push(newState);\n        }\n\n        return newState;\n    }\n\n    addStates(statesArray) {\n        for (var i = statesArray.length - 1; i >= 0; i--) {\n            this.addState(statesArray[i]);\n        }\n\n        return this;\n    }\n\n    getState(id) {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n\n            if(state.id === id){\n                return state;\n            }\n        }\n    }\n\n    isActive(id) {\n        var selectedState = this.getState(id) || {};\n\n        return selectedState.active || false;\n    }\n\n    getStates(idArr)  {\n        var idCount = null, returnArr = [];\n\n        if (typeof(idArr) === \"undefined\") {\n            return this.states;\n        }\n        else {\n            idCount = idArr.length;\n            \n            for (var i = 0; i < idCount; i++) {\n                returnArr.push(this.getState(idArr[i]));\n            }\n\n            return returnArr;\n        }\n    }\n\n    removeState(id) {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n\n            if (state.id === id) {\n                state.destroy();\n                this.states.splice(i, 1);\n            }\n        }\n\n        return this;\n    }\n\n    removeStates(idArray) {\n        for (var i = idArray.length - 1; i >= 0; i--) {\n            this.removeState(idArray[i]);\n        }\n\n        return this;\n    }\n\n    removeAllStates() {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n            state.destroy();\n        }\n\n        this.states = [];\n    }\n\n    addConfigOption(options) {\n        var defaultOptions = {\n            name: '', // name, this is used to apply to a state\n            test: null, //function which will perform the test\n            when: 'resize' // resize or match (match will mean that resize will never fire either), or once (which will test once, then delete state if test doesnt pass)\n        };\n\n        //Merge options with defaults\n        options = Object.assign({}, defaultOptions, options);\n\n        if(options.name !== '' && options.test !== null){\n            State.addConfigOption(options);\n        }\n    }\n\n    removeConfigOption(name) {\n        State.removeConfigOption(name);\n    }\n\n    getConfigOption(name) {\n        var configOptions = State.getConfigOptions();\n\n        if(typeof name === \"string\"){\n            for (var i = configOptions.length - 1; i >= 0; i--) {\n                if(configOptions[i].name === name){\n                    return configOptions[i];\n                }\n            }\n        }\n        else{\n            return configOptions;\n        }\n    }\n\n    getConfigOptions() {\n        return State.getConfigOptions();\n    }\n\n    resizeBrowser() {\n        var activeStates = filterStates(this.states, 'active', true);\n        var len = activeStates.length;\n\n        for (var i = 0; i < len; i++) {\n            activeStates[i].resizeState();\n        }\n    }\n\n    stateChange(func) {\n        State.setStateChangeMethod(func);\n    }\n};\n\nexport default new StateManager();\n"],"names":["filterStates","states","key","value","len","length","returnStates","i","state","push","makeID","text","possible","charAt","Math","floor","random","fireAllMethodsInArray","arr","arrLength","debounce","func","wait","immediate","timeout","context","this","args","arguments","callNow","setTimeout","apply","configOptions","stateChangeMethod","State","options","id","query","defaultOptions","Object","assign","onEnter","onLeave","onResize","onFirstRun","testConfigOptions","valid","active","init","test","window","matchMedia","matches","enterState","listener","changed","leaveState","bind","addListener","resizeState","destroy","removeListener","attachCallback","type","callback","runIfActive","when","totalConfigOptions","j","configOption","name","addConfigOption","getConfigOptions","removeConfigOption","forEach","item","index","splice","setStateChangeMethod","Error","resizeTimeout","resizeTimer","addEventListener","resizeBrowser","addState","newState","addStates","statesArray","getState","isActive","getStates","idArr","idCount","returnArr","removeState","removeStates","idArray","removeAllStates","getConfigOption","activeStates","stateChange"],"mappings":"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"}