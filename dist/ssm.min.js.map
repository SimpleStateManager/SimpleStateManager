{"version":3,"file":"ssm.min.js","sources":["../src/utils.js","../src/state.js","../src/ssm.js"],"sourcesContent":["export function filterStates(states, key, value) {\n    var len = states.length;\n    var returnStates = [];\n\n    for (var i = 0; i < len; i++) {\n        var state = states[i];\n\n        if (state[key] && state[key] === value) {\n            returnStates.push(state);\n        }\n    }\n\n    return returnStates;\n}\n\nexport function mergeOptions(obj1, obj2) {\n    var obj3 = {};\n\n    for (var attrname in obj1) {\n        obj3[attrname] = obj1[attrname];\n    }\n\n    for (var attrname2 in obj2) {\n        obj3[attrname2] = obj2[attrname2];\n    }\n\n    return obj3;\n}\n\nexport function makeID() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 10; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nexport function fireAllMethodsInArray(arr) {\n    var arrLength = arr.length;\n\n    for (var i = 0; i < arrLength; i++) {\n        arr[i]();\n    }\n}\n\nexport function funcToArray(func) {\n    if (typeof func === 'function') {\n        return [func];\n    }\n    else {\n        return func;\n    }\n}\n\nexport function debounce(func, wait, immediate) {\n    var timeout;\n    \n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}","import {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    mergeOptions,\n    filterStates,\n} from './utils';\n\nconst configOptions = [];\nlet stateChangeMethod = function(){};\n\nexport default class State {\n    constructor(options) {\n        this.id = options.id || makeID();\n        this.query = options.query || 'all';\n        // These are exposed as part of the state, not options so delete before\n        // we merge these into default options.\n        delete options.id;\n        delete options.query;\n    \n        var defaultOptions = {\n            onEnter: [],\n            onLeave: [],\n            onResize: [],\n            onFirstRun: []\n        };\n    \n        //Merge options with defaults to make the state\n        this.options = mergeOptions(defaultOptions, options);\n    \n        //Migrate methods into an array, this is to enable future functionality of adding extra methods to an existing state\n        if (typeof this.options.onEnter === \"function\") {\n            this.options.onEnter = [this.options.onEnter];\n        }\n    \n        if (typeof this.options.onLeave === \"function\") {\n            this.options.onLeave = [this.options.onLeave];\n        }\n    \n        if (typeof this.options.onResize === \"function\") {\n            this.options.onResize = [this.options.onResize];\n        }\n    \n        if (typeof this.options.onFirstRun === \"function\") {\n            this.options.onFirstRun = [this.options.onFirstRun];\n        }\n    \n        //Test the one time tests first, if the test is invalid we wont create the config option\n        if (this.testConfigOptions('once') === false) {\n            this.valid = false;\n            return false;\n        }\n    \n        this.valid = true;\n        this.active = false;\n        this.init();\n    }\n\n    init() {\n        this.test = window.matchMedia(this.query);\n\n        if (this.test.matches && this.testConfigOptions('match')) {\n            this.enterState();\n        }\n\n        this.listener = function (test) {\n            var changed = false;\n\n            if (test.matches) {\n                if (this.testConfigOptions('match')) {\n                    this.enterState();\n                    changed = true;\n                }\n            } else {\n                this.leaveState();\n                changed = true;\n            }\n\n            if (changed) {\n                stateChangeMethod();\n            }\n        }.bind(this);\n\n        this.test.addListener(this.listener);\n    }\n\n    //Handle entering a state\n    enterState() {\n        fireAllMethodsInArray(this.options.onFirstRun);\n        fireAllMethodsInArray(this.options.onEnter);\n        this.options.onFirstRun = [];\n        this.active = true;\n    }\n\n    //Handle leaving a state\n    leaveState() {\n        fireAllMethodsInArray(this.options.onLeave);\n        this.active = false;\n    }\n\n    //Handle the user resizing the browser\n    resizeState() {\n        if (this.testConfigOptions('resize')) {\n            fireAllMethodsInArray(this.options.onResize);\n        }\n    }\n\n    //When the StateManager removes a state we want to remove the event listener\n    destroy() {\n        this.test.removeListener(this.listener);\n    }\n\n    attachCallback(type, callback, runIfActive) {\n        switch (type) {\n            case 'enter':\n                this.options.onEnter.push(callback);\n                break;\n            case 'leave':\n                this.options.onLeave.push(callback);\n                break;\n            case 'resize':\n                this.options.onResize.push(callback);\n                break;\n        }\n\n        if (type === 'enter' && runIfActive && this.active) {\n            callback();\n        }\n    }\n\n    testConfigOptions(when) {\n        var totalConfigOptions = configOptions.length;\n\n        for (var j = 0; j < totalConfigOptions; j++) {\n            var configOption = configOptions[j];\n\n            if (typeof this.options[configOption.name] !== \"undefined\") {\n                if (configOption.when === when && configOption.test.bind(this)() === false) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    static addConfigOption(configOption) {\n        configOptions.push(configOption);\n    }\n\n    static getConfigOptions() {\n        return configOptions;\n    }\n    \n    static removeConfigOption(name) {\n        configOptions.forEach((item, index) => {\n            if (item.name === name) {\n                configOptions.splice(index, 1);\n            }\n        });\n    }\n\n    static setStateChangeMethod(func) {\n        if (typeof func === \"function\") {\n            stateChangeMethod = func;\n        }\n        else {\n            throw new Error('Not a function');\n        }\n    }\n};","import State from './state';\nimport {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    filterStates,\n} from './utils';\n\nvar resizeTimeout = 25;\n\nfunction Error(message) {\n    this.message = message;\n    this.name = \"Error\";\n}\n\n//State Manager Constructor\nclass StateManager {\n\n    constructor(options) {\n        this.states = [];\n        this.resizeTimer = null;\n        this.configOptions = [];\n\n        window.addEventListener(\"resize\", debounce(this.resizeBrowser.bind(this), resizeTimeout), true);    \n    }\n\n    addState(options) {\n        var newState = new State(options);\n        \n        if (newState.valid) {\n            this.states.push(newState);\n        }\n\n        return newState;\n    }\n\n    addStates(statesArray) {\n        for (var i = statesArray.length - 1; i >= 0; i--) {\n            this.addState(statesArray[i]);\n        }\n\n        return this;\n    }\n\n    getState(id) {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n\n            if(state.id === id){\n                return state;\n            }\n        }\n    }\n\n    isActive(id) {\n        var selectedState = this.getState(id) || {};\n\n        return selectedState.active || false;\n    }\n\n    getStates(idArr)  {\n        var idCount = null, returnArr = [];\n\n        if (typeof(idArr) === \"undefined\") {\n            return this.states;\n        }\n        else {\n            idCount = idArr.length;\n            \n            for (var i = 0; i < idCount; i++) {\n                returnArr.push(this.getState(idArr[i]));\n            }\n\n            return returnArr;\n        }\n    }\n\n    removeState(id) {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n\n            if (state.id === id) {\n                state.destroy();\n                this.states.splice(i, 1);\n            }\n        }\n\n        return this;\n    }\n\n    removeStates(idArray) {\n        for (var i = idArray.length - 1; i >= 0; i--) {\n            this.removeState(idArray[i]);\n        }\n\n        return this;\n    }\n\n    removeAllStates() {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n            state.destroy();\n        }\n\n        this.states = [];\n    }\n\n    addConfigOption(options) {\n        var defaultOptions = {\n            name: '', // name, this is used to apply to a state\n            test: null, //function which will perform the test\n            when: 'resize' // resize or match (match will mean that resize will never fire either), or once (which will test once, then delete state if test doesnt pass)\n        };\n\n        //Merge options with defaults\n        options = Object.assign({}, defaultOptions, options);\n\n        if(options.name !== '' && options.test !== null){\n            State.addConfigOption(options);\n        }\n    }\n\n    removeConfigOption(name) {\n        State.removeConfigOption(name);\n    }\n\n    getConfigOption(name) {\n        var configOptions = State.getConfigOptions();\n\n        if(typeof name === \"string\"){\n            for (var i = configOptions.length - 1; i >= 0; i--) {\n                if(configOptions[i].name === name){\n                    return configOptions[i];\n                }\n            }\n        }\n        else{\n            return configOptions;\n        }\n    }\n\n    getConfigOptions() {\n        return State.getConfigOptions();\n    }\n\n    resizeBrowser() {\n        var activeStates = filterStates(this.states, 'active', true);\n        var len = activeStates.length;\n\n        for (var i = 0; i < len; i++) {\n            activeStates[i].resizeState();\n        }\n    }\n\n    stateChange(func) {\n        State.setStateChangeMethod(func);\n    }\n};\n\nexport default new StateManager();\n"],"names":["filterStates","states","key","value","len","length","returnStates","i","state","push","mergeOptions","obj1","obj2","obj3","attrname","attrname2","makeID","text","possible","charAt","Math","floor","random","fireAllMethodsInArray","arr","arrLength","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","setTimeout","configOptions","stateChangeMethod","State","options","id","query","defaultOptions","onEnter","onLeave","onResize","onFirstRun","testConfigOptions","valid","active","init","test","window","matchMedia","matches","enterState","listener","changed","leaveState","bind","addListener","resizeState","destroy","removeListener","attachCallback","type","callback","runIfActive","when","totalConfigOptions","j","configOption","name","addConfigOption","getConfigOptions","removeConfigOption","forEach","item","index","splice","setStateChangeMethod","Error","resizeTimeout","StateManager","resizeTimer","addEventListener","resizeBrowser","addState","newState","addStates","statesArray","getState","isActive","selectedState","getStates","idArr","idCount","returnArr","removeState","removeStates","idArray","removeAllStates","Object","assign","getConfigOption","activeStates","stateChange"],"mappings":"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"}