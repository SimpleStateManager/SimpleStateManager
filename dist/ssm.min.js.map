{"version":3,"file":"ssm.min.js","sources":["../src/utils.js","../src/state.js","../src/ssm.js"],"sourcesContent":["export function filterStates(states, key, value) {\n    return states.filter((state) => {\n        return state[key] && state[key] === value;\n    });\n}\n\nexport function makeID() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\nexport function fireAllMethodsInArray(arr) {\n    arr.forEach(item => {\n        item();\n    });\n}\n\nexport function funcToArray(func) {\n    return typeof func === 'function' ? [func] : func;\n}\n\nexport function debounce(func, wait, immediate) {\n    var timeout;\n    \n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}","import {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    filterStates,\n} from './utils';\n\nconst configOptions = [];\nlet stateChangeMethod = function(){};\n\nexport default class State {\n    constructor(options) {\n        this.id = options.id || makeID();\n        this.query = options.query || 'all';\n        // These are exposed as part of the state, not options so delete before\n        // we merge these into default options.\n        delete options.id;\n        delete options.query;\n    \n        var defaultOptions = {\n            onEnter: [],\n            onLeave: [],\n            onResize: [],\n            onFirstRun: []\n        };\n    \n        //Merge options with defaults to make the state\n        this.options = Object.assign({}, defaultOptions, options);\n    \n        //Migrate methods into an array, this is to enable future functionality of adding extra methods to an existing state\n        if (typeof this.options.onEnter === \"function\") {\n            this.options.onEnter = [this.options.onEnter];\n        }\n    \n        if (typeof this.options.onLeave === \"function\") {\n            this.options.onLeave = [this.options.onLeave];\n        }\n    \n        if (typeof this.options.onResize === \"function\") {\n            this.options.onResize = [this.options.onResize];\n        }\n    \n        if (typeof this.options.onFirstRun === \"function\") {\n            this.options.onFirstRun = [this.options.onFirstRun];\n        }\n    \n        //Test the one time tests first, if the test is invalid we wont create the config option\n        if (this.testConfigOptions('once') === false) {\n            this.valid = false;\n            return false;\n        }\n    \n        this.valid = true;\n        this.active = false;\n        this.init();\n    }\n\n    init() {\n        this.test = window.matchMedia(this.query);\n\n        if (this.test.matches && this.testConfigOptions('match')) {\n            this.enterState();\n        }\n\n        this.listener = function (test) {\n            var changed = false;\n\n            if (test.matches) {\n                if (this.testConfigOptions('match')) {\n                    this.enterState();\n                    changed = true;\n                }\n            } else {\n                this.leaveState();\n                changed = true;\n            }\n\n            if (changed) {\n                stateChangeMethod();\n            }\n        }.bind(this);\n\n        this.test.addListener(this.listener);\n    }\n\n    //Handle entering a state\n    enterState() {\n        fireAllMethodsInArray(this.options.onFirstRun);\n        fireAllMethodsInArray(this.options.onEnter);\n        this.options.onFirstRun = [];\n        this.active = true;\n    }\n\n    //Handle leaving a state\n    leaveState() {\n        fireAllMethodsInArray(this.options.onLeave);\n        this.active = false;\n    }\n\n    //Handle the user resizing the browser\n    resizeState() {\n        if (this.testConfigOptions('resize')) {\n            fireAllMethodsInArray(this.options.onResize);\n        }\n    }\n\n    //When the StateManager removes a state we want to remove the event listener\n    destroy() {\n        this.test.removeListener(this.listener);\n    }\n\n    attachCallback(type, callback, runIfActive) {\n        switch (type) {\n            case 'enter':\n                this.options.onEnter.push(callback);\n                break;\n            case 'leave':\n                this.options.onLeave.push(callback);\n                break;\n            case 'resize':\n                this.options.onResize.push(callback);\n                break;\n        }\n\n        if (type === 'enter' && runIfActive && this.active) {\n            callback();\n        }\n    }\n\n    testConfigOptions(when) {\n        var totalConfigOptions = configOptions.length;\n\n        for (var j = 0; j < totalConfigOptions; j++) {\n            var configOption = configOptions[j];\n\n            if (typeof this.options[configOption.name] !== \"undefined\") {\n                if (configOption.when === when && configOption.test.bind(this)() === false) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    static addConfigOption(configOption) {\n        configOptions.push(configOption);\n    }\n\n    static getConfigOptions() {\n        return configOptions;\n    }\n    \n    static removeConfigOption(name) {\n        configOptions.forEach((item, index) => {\n            if (item.name === name) {\n                configOptions.splice(index, 1);\n            }\n        });\n    }\n\n    static setStateChangeMethod(func) {\n        if (typeof func === \"function\") {\n            stateChangeMethod = func;\n        }\n        else {\n            throw new Error('Not a function');\n        }\n    }\n};","import State from './state';\nimport {\n    debounce,\n    funcToArray,\n    fireAllMethodsInArray,\n    makeID,\n    filterStates,\n} from './utils';\n\nvar resizeTimeout = 25;\n\nfunction Error(message) {\n    this.message = message;\n    this.name = \"Error\";\n}\n\n//State Manager Constructor\nclass StateManager {\n    constructor(options) {\n        this.states = [];\n        this.resizeTimer = null;\n        this.configOptions = [];\n\n        window.addEventListener(\"resize\", debounce(this.resizeBrowser.bind(this), resizeTimeout), true);    \n    }\n\n    addState(options) {\n        var newState = new State(options);\n        \n        if (newState.valid) {\n            this.states.push(newState);\n        }\n\n        return newState;\n    }\n\n    addStates(statesArray) {\n        for (var i = statesArray.length - 1; i >= 0; i--) {\n            this.addState(statesArray[i]);\n        }\n    }\n\n    getState(id) {\n        for (var i = this.states.length - 1; i >= 0; i--) {\n            var state = this.states[i];\n\n            if(state.id === id){\n                return state;\n            }\n        }\n    }\n\n    isActive(id) {\n        var selectedState = this.getState(id) || {};\n\n        return selectedState.active || false;\n    }\n\n    getStates(idArr)  {\n        var idCount = null, returnArr = [];\n\n        if (typeof(idArr) === \"undefined\") {\n            return this.states;\n        }\n        else {\n            return idArr.map((id) => {\n                return this.getState(id)\n            });\n        }\n    }\n\n    removeState(id) {\n        this.states.forEach((state, index) => {\n            if (state.id === id) {\n                state.destroy();\n                this.states.splice(index, 1);\n            }\n        });\n    }\n\n    removeStates(idArray) {\n        idArray.forEach((id) => this.removeState(id));\n    }\n\n    removeAllStates() {\n        this.states.forEach(state => state.destroy());\n        this.states = [];\n    }\n\n    addConfigOption(options) {\n        const defaultOptions = {\n            name: '', // name, this is used to apply to a state\n            test: null, //function which will perform the test\n            when: 'resize' // resize or match (match will mean that resize will never fire either), or once (which will test once, then delete state if test doesnt pass)\n        };\n\n        //Merge options with defaults\n        options = Object.assign({}, defaultOptions, options);\n\n        if (options.name !== '' && options.test !== null) {\n            State.addConfigOption(options);\n        }\n    }\n\n    removeConfigOption(name) {\n        State.removeConfigOption(name);\n    }\n\n    getConfigOptions(name) {\n        var configOptions = State.getConfigOptions();\n\n        if(typeof name === \"string\"){\n            return configOptions.filter(configOption =>  configOption.name === name);\n        }\n        else{\n            return configOptions;\n        }\n    }\n\n    resizeBrowser() {\n        const activeStates = filterStates(this.states, 'active', true);\n\n        activeStates.forEach((state) => {\n            state.resizeState();\n        });\n    }\n\n    stateChange(func) {\n        State.setStateChangeMethod(func);\n    }\n};\n\nexport default new StateManager();\n"],"names":["filterStates","states","key","value","filter","state","makeID","Math","random","toString","substr","fireAllMethodsInArray","arr","forEach","debounce","func","wait","immediate","timeout","context","this","args","arguments","callNow","setTimeout","apply","configOptions","stateChangeMethod","State","options","id","query","defaultOptions","Object","assign","onEnter","onLeave","onResize","onFirstRun","testConfigOptions","valid","active","init","test","window","matchMedia","matches","enterState","listener","changed","leaveState","bind","addListener","removeListener","type","callback","runIfActive","push","when","totalConfigOptions","length","j","configOption","name","item","index","splice","Error","resizeTimeout","resizeTimer","addEventListener","resizeBrowser","newState","statesArray","i","addState","getState","idArr","map","_this","destroy","idArray","_this3","removeState","addConfigOption","removeConfigOption","getConfigOptions","resizeState","setStateChangeMethod"],"mappings":"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"}